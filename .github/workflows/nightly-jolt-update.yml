name: Nightly Jolt ZKVM Update

on:
  schedule:
    # Run daily at 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allow manual trigger for testing

permissions:
  contents: write
  actions: read

concurrency:
  group: jolt-update
  cancel-in-progress: true

jobs:
  update-jolt:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Git configuration
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3 python3-pip
          pip3 install pyyaml
      
      - name: Get latest Jolt commit
        id: jolt-commit
        run: |
          # Get the current commit hash from config.json
          CURRENT_COMMIT=$(jq -r '.zkvms.jolt.commit' config.json)
          echo "Current Jolt commit: $CURRENT_COMMIT"
          
          # Get the latest commit hash from the main branch of the remote repository
          REPO_URL=$(jq -r '.zkvms.jolt.repo_url' config.json)
          LATEST_COMMIT=$(git ls-remote $REPO_URL refs/heads/main | cut -f1 | head -c8)
          echo "Latest Jolt commit from main branch: $LATEST_COMMIT"
          
          # Check if there's an update available
          if [ "$CURRENT_COMMIT" != "$LATEST_COMMIT" ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT  
            echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
            echo "🔄 Jolt update available: $CURRENT_COMMIT -> $LATEST_COMMIT"
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "✅ Jolt is up to date at commit $CURRENT_COMMIT"
          fi
      
      - name: Update config.json with latest commit
        if: steps.jolt-commit.outputs.needs_update == 'true'
        run: |
          LATEST_COMMIT=${{ steps.jolt-commit.outputs.latest_commit }}
          echo "📝 Updating config.json with commit: $LATEST_COMMIT"
          
          # Update the commit hash in config.json using jq
          jq --arg commit "$LATEST_COMMIT" '.zkvms.jolt.commit = $commit' config.json > config.json.tmp
          mv config.json.tmp config.json
          
          # Verify the update
          NEW_COMMIT=$(jq -r '.zkvms.jolt.commit' config.json)
          echo "✅ Updated Jolt commit to: $NEW_COMMIT"
      
      - name: Set up Docker Buildx
        if: steps.jolt-commit.outputs.needs_update == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Build Jolt ZKVM
        if: steps.jolt-commit.outputs.needs_update == 'true'
        run: |
          echo "🔨 Building Jolt ZKVM..."
          # Force rebuild by removing existing binary
          rm -f binaries/jolt-binary
          
          # Run the build script specifically for Jolt
          FORCE=1 ./src/build.sh jolt
        continue-on-error: true
        id: build-jolt
      
      - name: Test Jolt ZKVM
        if: steps.jolt-commit.outputs.needs_update == 'true' && steps.build-jolt.outcome == 'success'
        run: |
          echo "🧪 Testing Jolt ZKVM..."
          
          # Run tests specifically for Jolt
          ./src/test.sh jolt
        continue-on-error: true
        id: test-jolt
      
      - name: Update dashboard
        if: steps.jolt-commit.outputs.needs_update == 'true'
        run: |
          echo "📊 Updating dashboard..."
          python3 src/update.py
        continue-on-error: true
        id: update-dashboard
      
      - name: Check for changes and commit
        if: steps.jolt-commit.outputs.needs_update == 'true'
        run: |
          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
          else
            echo "Changes detected, preparing to commit"
            echo "has_changes=true" >> $GITHUB_ENV
            
            # Show what changed
            echo "📋 Files changed:"
            git diff --name-only
            git diff --cached --name-only
          fi
      
      - name: Commit and push changes
        if: steps.jolt-commit.outputs.needs_update == 'true' && env.has_changes == 'true'
        run: |
          CURRENT_COMMIT=${{ steps.jolt-commit.outputs.current_commit }}
          LATEST_COMMIT=${{ steps.jolt-commit.outputs.latest_commit }}
          
          # Add all modified files (only tracked files that should be committed)
          git add config.json data/ docs/ index.html || true
          
          # Create commit message with build/test status
          COMMIT_MSG="chore: update Jolt ZKVM from $CURRENT_COMMIT to $LATEST_COMMIT"
          
          if [ "${{ steps.build-jolt.outcome }}" = "success" ]; then
            COMMIT_MSG="${COMMIT_MSG}"$'\n\n'"✅ Build: successful"
          else
            COMMIT_MSG="${COMMIT_MSG}"$'\n\n'"❌ Build: failed"
          fi
          
          if [ "${{ steps.test-jolt.outcome }}" = "success" ]; then
            COMMIT_MSG="${COMMIT_MSG}"$'\n'"✅ Tests: completed"
          elif [ "${{ steps.build-jolt.outcome }}" = "success" ]; then
            COMMIT_MSG="${COMMIT_MSG}"$'\n'"❌ Tests: failed"
          else
            COMMIT_MSG="${COMMIT_MSG}"$'\n'"⚠️ Tests: skipped (build failed)"
          fi
          
          if [ "${{ steps.update-dashboard.outcome }}" = "success" ]; then
            COMMIT_MSG="${COMMIT_MSG}"$'\n'"✅ Dashboard: updated"
          else
            COMMIT_MSG="${COMMIT_MSG}"$'\n'"❌ Dashboard: update failed"
          fi
          
          COMMIT_MSG="${COMMIT_MSG}"$'\n\n'"🤖 Automated nightly update"
          
          # Commit changes
          git commit -m "$COMMIT_MSG"
          
          # Push changes
          git push origin main
          
          echo "✅ Changes committed and pushed successfully"
      
      - name: Create issue on failure
        if: failure() && steps.jolt-commit.outputs.needs_update == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const current_commit = '${{ steps.jolt-commit.outputs.current_commit }}';
            const latest_commit = '${{ steps.jolt-commit.outputs.latest_commit }}';
            const run_url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Check if there's already an open issue for failed Jolt updates
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated,jolt-update,failed'
            });
            
            if (issues.data.length === 0) {
              // Create new issue only if none exists
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Nightly Jolt ZKVM Update Failed`,
                labels: ['automated', 'jolt-update', 'failed'],
                body: [
                  '## Jolt ZKVM Update Failed',
                  '',
                  `**Attempted Update:** \`${current_commit}\` → \`${latest_commit}\``,
                  '',
                  `**Workflow Run:** ${run_url}`,
                  '',
                  '### Status Summary',
                  `- **Build Status:** ${{ steps.build-jolt.outcome }}`,
                  `- **Test Status:** ${{ steps.test-jolt.outcome }}`,
                  `- **Dashboard Update:** ${{ steps.update-dashboard.outcome }}`,
                  '',
                  '### Next Steps',
                  `1. Check the [workflow run](${run_url}) for detailed error logs`,
                  '2. Investigate build/test failures',
                  '3. Fix any issues and manually trigger the workflow',
                  '4. Close this issue once resolved',
                  '',
                  'This issue was created automatically by the nightly update workflow.'
                ].join('\n')
              });
              console.log('Created issue for failed Jolt update');
            } else {
              console.log('Issue already exists for failed Jolt updates');
            }
      
      - name: Post job summary
        if: always()
        run: |
          echo "## Nightly Jolt ZKVM Update Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.jolt-commit.outputs.needs_update }}" = "true" ]; then
            echo "### Update Status: 🔄 Update Available" >> $GITHUB_STEP_SUMMARY
            echo "- **From:** \`${{ steps.jolt-commit.outputs.current_commit }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **To:** \`${{ steps.jolt-commit.outputs.latest_commit }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Build status
            if [ "${{ steps.build-jolt.outcome }}" = "success" ]; then
              echo "### 🔨 Build: ✅ Successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 🔨 Build: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Test status
            if [ "${{ steps.test-jolt.outcome }}" = "success" ]; then
              echo "### 🧪 Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.build-jolt.outcome }}" = "success" ]; then
              echo "### 🧪 Tests: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 🧪 Tests: ⚠️ Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Dashboard status
            if [ "${{ steps.update-dashboard.outcome }}" = "success" ]; then
              echo "### 📊 Dashboard: ✅ Updated" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📊 Dashboard: ❌ Update failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Commit status
            if [ "${{ env.has_changes }}" = "true" ]; then
              echo "### 📝 Changes: ✅ Committed and pushed" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📝 Changes: ℹ️ No changes to commit" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Update Status: ✅ Already Up to Date" >> $GITHUB_STEP_SUMMARY
            echo "Jolt ZKVM is already at the latest commit: \`$(jq -r '.zkvms.jolt.commit' config.json)\`" >> $GITHUB_STEP_SUMMARY
          fi